<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zoomi的虚幻世界</title>
  
  <subtitle>我的邮箱:LFF3216689784@outlook.com</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-22T14:01:04.412Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Zoomi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GAS系统API百科全书</title>
    <link href="http://example.com/2025/04/22/GAS%E7%B3%BB%E7%BB%9FAPI%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6-by_Zoomi_%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E6%88%91/"/>
    <id>http://example.com/2025/04/22/GAS%E7%B3%BB%E7%BB%9FAPI%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6-by_Zoomi_%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E6%88%91/</id>
    <published>2025-04-22T14:00:54.000Z</published>
    <updated>2025-04-22T14:01:04.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GAS系统简介-什么是GAS系统"><a href="#GAS系统简介-什么是GAS系统" class="headerlink" title="GAS系统简介-什么是GAS系统"></a>GAS系统简介-什么是GAS系统</h1><p><strong>GAS​</strong>​ 即 ​<strong>​Gameplay Ability System​</strong>​（游戏玩法能力系统），是 ​<strong>​Epic Games​</strong>​ 在 ​<strong>​Unreal Engine（虚幻引擎）​</strong>​ 中开发的一套功能强大且灵活的框架，用于管理和实现复杂的游戏玩法机制。​</p><h3 id="GAS-的核心组件"><a href="#GAS-的核心组件" class="headerlink" title="GAS 的核心组件"></a>GAS 的核心组件</h3><p>GAS 主要由以下三个核心组件构成：</p><ol><li><p>​<strong>​Ability System Component (ASC)​</strong>​:</p><ul><li>​<strong>​作用​</strong>​：作为 GAS 的核心，ASC 负责管理角色的能力、属性和效果。每个拥有 GAS 的角色通常都有一个 ASC 实例。</li><li>​<strong>​功能​</strong>​：<ul><li>管理和激活能力（Abilities）。</li><li>处理属性（Attributes）的增减和查询。</li><li>应用和管理效果（Effects），如增益、减益、伤害等。</li><li>提供输入绑定和能力激活的接口。</li></ul></li></ul></li><li><p>​<strong>​Abilities（能力）​</strong>​:</p><ul><li>​<strong>​定义​</strong>​：能力代表角色可以执行的特定动作或行为，如攻击、跳跃、治疗等。</li><li>​<strong>​实现​</strong>​：通过继承 <code>UGameplayAbility</code> 类来创建自定义能力，定义能力的激活条件、执行逻辑和冷却时间等。</li></ul></li><li><p>​<strong>​Attributes（属性）​</strong>​:</p><ul><li>​<strong>​定义​</strong>​：属性代表角色的各种数值特征，如生命值、法力值、攻击力等。</li><li>​<strong>​实现​</strong>​：通过继承 <code>UAttributeSet</code> 类来创建自定义属性集，定义角色的基础属性和衍生属性。</li></ul></li><li><p>​<strong>​Effects（效果）​</strong>​:</p><ul><li>​<strong>​定义​</strong>​：效果用于修改角色的属性或状态，如增加攻击力、减少移动速度、施加中毒效果等。</li><li>​<strong>​实现​</strong>​：通过创建 <code>GameplayEffect</code> 子类来定义各种效果，设置效果的类型、持续时间、数值变化等。</li></ul></li></ol><h3 id="GAS-的优势与使用步骤"><a href="#GAS-的优势与使用步骤" class="headerlink" title="GAS 的优势与使用步骤"></a>GAS 的优势与使用步骤</h3><ul><li>​<strong>​模块化设计​</strong>​：GAS 将能力、属性和效果分离，使得系统更加清晰和易于维护。</li><li>​<strong>​高度可扩展​</strong>​：开发者可以根据项目需求自定义能力、属性和效果，满足各种复杂的游戏玩法需求。</li><li>​<strong>​灵活的激活机制​</strong>​：支持基于输入、状态或其他条件的能力激活，适应不同的游戏设计模式。</li><li>​<strong>​网络同步​</strong>​：内置的网络同步机制，确保在多人游戏中能力、属性和效果的一致性和实时性。</li><li>​<strong>​可视化编辑​</strong>​：通过蓝图系统，开发者可以在编辑器中直观地配置和调试 GAS 组件，提高开发效率。</li><li><h3 id="如何在项目中启用-GAS"><a href="#如何在项目中启用-GAS" class="headerlink" title="如何在项目中启用 GAS"></a>如何在项目中启用 GAS</h3></li></ul><ol><li><p>​<strong>​启用 GAS 插件​</strong>​：</p><ul><li>在 Unreal Engine 编辑器中，导航到 <code>编辑</code> &gt; <code>插件</code>。</li><li>搜索并启用 <code>Gameplay Ability System</code> 插件。</li><li>重启编辑器以应用更改。</li></ul></li><li><p>​<strong>​创建 Ability System Component (ASC)​</strong>​：</p><ul><li>在角色类中添加一个 <code>UAbilitySystemComponent</code> 类型的成员变量。</li><li>初始化并绑定 ASC 到角色。</li></ul></li><li><p>​<strong>​定义 Attributes​</strong>​：</p><ul><li>创建继承自 <code>UAttributeSet</code> 的自定义属性集类。</li><li>定义所需的属性，如生命值、法力值等。</li></ul></li><li><p>​<strong>​创建 Abilities​</strong>​：</p><ul><li>创建继承自 <code>UGameplayAbility</code> 的自定义能力类。</li><li>实现能力的激活逻辑、执行过程和冷却机制。</li></ul></li><li><p>​<strong>​配置 Effects​</strong>​：</p><ul><li>创建继承自 <code>UGameplayEffect</code> 的自定义效果类。</li><li>定义效果的类型、数值变化和应用逻辑。</li></ul></li><li><p>​<strong>​绑定输入和激活能力​</strong>​：</p><ul><li>在角色或控制器中绑定输入事件，调用 ASC 的能力激活函数。</li><li>根据游戏逻辑决定何时激活特定能力。</li></ul></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是一个简单的示例，展示如何在角色类中初始化 GAS 组件并激活一个能力：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyCharacter.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCharacter.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MYGAME_API</span> AMyCharacter : <span class="keyword">public</span> ACharacter, <span class="keyword">public</span> IAbilitySystemInterface</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AMyCharacter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IAbilitySystemInterface 实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> UAbilitySystemComponent* <span class="title">GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// ASC 实例</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>(VisibleAnywhere, BlueprintReadOnly, Category = <span class="string">&quot;Abilities&quot;</span>, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>* AbilitySystemComponent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PossessedBy</span><span class="params">(AController* NewController)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 激活特定能力</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ActivateAbility</span><span class="params">(FGameplayAbilitySpecHandle AbilityHandle)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyCharacter.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyAbilitySet.h&quot;</span> <span class="comment">// 自定义属性集</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyGameplayAbility.h&quot;</span> <span class="comment">// 自定义能力</span></span></span><br><span class="line"></span><br><span class="line">AMyCharacter::<span class="built_in">AMyCharacter</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建并附加 ASC</span></span><br><span class="line">    AbilitySystemComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UAbilitySystemComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AbilitySystemComponent&quot;</span>));</span><br><span class="line">    AbilitySystemComponent-&gt;<span class="built_in">SetupAttachment</span>(RootComponent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UAbilitySystemComponent* <span class="title">AMyCharacter::GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AbilitySystemComponent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyCharacter::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化属性集</span></span><br><span class="line">        AbilitySystemComponent-&gt;<span class="built_in">InitAbilityActorInfo</span>(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载并赋予基础能力（假设在蓝图中配置）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyCharacter::PossessedBy</span><span class="params">(AController* NewController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">PossessedBy</span>(NewController);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComponent &amp;&amp; NewController)</span><br><span class="line">    &#123;</span><br><span class="line">        AbilitySystemComponent-&gt;<span class="built_in">InitAbilityActorInfo</span>(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以在这里根据控制器类型进行额外的初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyCharacter::ActivateAbility</span><span class="params">(FGameplayAbilitySpecHandle AbilityHandle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        AbilitySystemComponent-&gt;<span class="built_in">TryActivateAbility</span>(AbilityHandle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="API百科"><a href="#API百科" class="headerlink" title="API百科"></a>API百科</h1><h2 id="virtual-void-UAibilitySystemComponent-InitAbilityActorInfo-AActor-InOwnerActor-AActor-InAvatarActor-函数说明"><a href="#virtual-void-UAibilitySystemComponent-InitAbilityActorInfo-AActor-InOwnerActor-AActor-InAvatarActor-函数说明" class="headerlink" title="virtual void UAibilitySystemComponent::InitAbilityActorInfo(AActor *InOwnerActor, AActor *InAvatarActor) 函数说明"></a><code>virtual void UAibilitySystemComponent::InitAbilityActorInfo(AActor *InOwnerActor, AActor *InAvatarActor)</code> 函数说明</h2><ul><li>​<strong>​功能​</strong>​：初始化能力的 Actor 信息——用于保存关于我们作用于谁以及谁控制我们的信息的结构体。</li><li>​<strong>​参数​</strong>​：<ul><li><code>InOwnerActor</code>：从逻辑上拥有此组件的 Actor。</li><li><code>InAvatarActor</code>：我们在世界中实际作用的物理 Actor。通常是 Pawn，但也可能是 Tower、Building、Turret 等，可能与 <code>InOwnerActor</code> 是同一个对象。</li></ul></li></ul><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在虚幻引擎的 Gameplay Ability System（GAS）中，这个函数起着关键作用。它确保了能力系统能够正确识别和管理与角色相关的 Actor 信息。<code>OwnerActor</code> 帮助确定逻辑上的所属关系，而 <code>InAvatarActor</code> 则明确了实际进行交互操作的对象，这对于能力的触发、效果应用等方面都非常重要。</p><h3 id="示例代码（假设在自定义组件中调用该函数进行初始化）"><a href="#示例代码（假设在自定义组件中调用该函数进行初始化）" class="headerlink" title="示例代码（假设在自定义组件中调用该函数进行初始化）"></a>示例代码（假设在自定义组件中调用该函数进行初始化）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设在某个自定义组件类中</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/ActorComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyAbilitySystemComponent.h&quot;</span> <span class="comment">// 引入你的 Ability System Component 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCustomComponent.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YOURGAMENAME_API</span> UMyCustomComponent : <span class="keyword">public</span> UActorComponent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="comment">// Sets default values for this component&#x27;s properties</span></span><br><span class="line">    <span class="built_in">UMyCustomComponent</span>();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// Called when the game starts</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = <span class="string">&quot;AbilitySystem&quot;</span>)</span><br><span class="line">    UAbilitySystemComponent* AbilitySystemComp; <span class="comment">// 假设你有一个 Ability System Component 成员变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = <span class="string">&quot;Actors&quot;</span>)</span><br><span class="line">    AActor* OwnerActor; <span class="comment">// 可以设置逻辑拥有者 Actor</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = <span class="string">&quot;Actors&quot;</span>)</span><br><span class="line">    AActor* AvatarActor; <span class="comment">// 可以设置实际作用的 Actor</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 其他私有成员变量和函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 BeginPlay 函数，在其中调用 InitAbilityActorInfo 进行初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyCustomComponent::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComp &amp;&amp; OwnerActor &amp;&amp; AvatarActor)</span><br><span class="line">    &#123;</span><br><span class="line">        AbilitySystemComp-&gt;<span class="built_in">InitAbilityActorInfo</span>(OwnerActor, AvatarActor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景说明"><a href="#使用场景说明" class="headerlink" title="使用场景说明"></a>使用场景说明</h3><p>在游戏开发中，当你需要使用 GAS 来管理角色的能力时，通常会在角色或相关组件的初始化阶段调用 <code>InitAbilityActorInfo</code> 函数。例如，在角色生成时，或者在自定义组件初始化时，确保 GAS 能够正确关联到对应的 Actor 信息，以便后续进行能力的激活、效果的管理等操作。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保 <code>AbilitySystemComp</code>、<code>OwnerActor</code> 和 <code>AvatarActor</code> 在调用函数时都已经正确初始化且不为空，否则可能会导致运行时错误。</li><li>根据实际游戏逻辑，合理设置 <code>OwnerActor</code> 和 <code>AvatarActor</code> 的值，以准确反映角色之间的所属和交互关系。</li><li>如果在多人联机环境下，要注意这些 Actor 信息的同步问题，确保客户端和服务器端的一致性。</li></ul><h2 id="PossessedBy-AController-NewController-函数详解"><a href="#PossessedBy-AController-NewController-函数详解" class="headerlink" title="PossessedBy(AController* NewController) 函数详解"></a><code>PossessedBy(AController* NewController)</code> 函数详解</h2><h4 id="核心内容分析"><a href="#核心内容分析" class="headerlink" title="核心内容分析"></a>核心内容分析</h4><p><code>PossessedBy(AController* NewController)</code> 是 Unreal Engine（虚幻引擎）中 <code>ACharacter</code> 类的一个重要虚函数，用于处理控制器（Controller）拥有（Possess）角色（Character）时的逻辑。在游戏开发中，控制器负责管理玩家的输入或 AI 的决策，而角色则是游戏中实际执行动作的实体。当控制器拥有一个角色时，<code>PossessedBy</code> 函数会被调用，允许开发者在角色被控制时进行必要的初始化和设置。</p><h4 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PossessedBy</span><span class="params">(AController* NewController)</span> <span class="keyword">override</span></span>;</span><br></pre></td></tr></table></figure><ul><li>​<strong>​<code>PossessedBy</code>​</strong>​: 虚函数，用于响应控制器拥有角色的事件。</li><li>​<strong>​<code>AController* NewController</code>​</strong>​: 指向新拥有该角色的控制器的指针。</li></ul><h4 id="在-GAS-中的作用"><a href="#在-GAS-中的作用" class="headerlink" title="在 GAS 中的作用"></a>在 GAS 中的作用</h4><p>在 ​<strong>​Gameplay Ability System (GAS)​</strong>​ 中，<code>PossessedBy</code> 函数的作用尤为重要，因为它涉及到 ​<strong>​Ability System Component (ASC)​</strong>​ 的初始化和管理。ASC 是 GAS 的核心组件，负责管理角色的能力（Abilities）、属性（Attributes）和效果（Effects）。当控制器拥有角色时，需要确保 ASC 能够正确地与控制器关联，并进行必要的初始化操作。</p><h4 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h4><ol><li><p>​<strong>​初始化 Ability System Component (ASC)​</strong>​:<br> 当控制器拥有一个角色时，通常需要确保该角色的 ASC 被正确初始化。这包括绑定与控制器相关的输入、设置默认的游戏玩法标签（Gameplay Tags）等。</p></li><li><p>​<strong>​绑定输入和能力激活​</strong>​:<br> 控制器可能负责处理玩家的输入，这些输入用于激活角色的能力。通过在 <code>PossessedBy</code> 中设置适当的绑定，可以确保当控制器发出指令时，ASC 能够正确响应并激活相应的能力。</p></li><li><p>​<strong>​管理游戏玩法标签和效果​</strong>​:<br> 控制器的拥有关系变化可能会影响角色的游戏玩法标签或应用的效果。例如，当 AI 控制器拥有角色时，可能需要应用特定的效果或标签，以反映 AI 的行为模式。</p></li></ol><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><p>以下是一个示例，展示如何在自定义的 Character 类中重写 <code>PossessedBy</code> 函数，并在其中初始化 GAS 相关的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyCharacter.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCharacter.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MYGAME_API</span> AMyCharacter : <span class="keyword">public</span> ACharacter, <span class="keyword">public</span> IAbilitySystemInterface</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AMyCharacter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IAbilitySystemInterface 实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> UAbilitySystemComponent* <span class="title">GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// ASC 实例</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>(VisibleAnywhere, BlueprintReadOnly, Category = <span class="string">&quot;Abilities&quot;</span>, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UMyAbilitySystemComponent</span>* AbilitySystemComponent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PossessedBy</span><span class="params">(AController* NewController)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">UnPossess</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">// 可选：处理控制器失去控制的情况</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyCharacter.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyAbilitySystemComponent.h&quot;</span> <span class="comment">// 假设你有一个自定义的 ASC 类</span></span></span><br><span class="line"></span><br><span class="line">AMyCharacter::<span class="built_in">AMyCharacter</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建并附加 ASC</span></span><br><span class="line">    AbilitySystemComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UMyAbilitySystemComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AbilitySystemComponent&quot;</span>));</span><br><span class="line">    AbilitySystemComponent-&gt;<span class="built_in">SetupAttachment</span>(RootComponent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UAbilitySystemComponent* <span class="title">AMyCharacter::GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AbilitySystemComponent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyCharacter::PossessedBy</span><span class="params">(AController* NewController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">PossessedBy</span>(NewController);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComponent &amp;&amp; NewController)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化 ASC，例如绑定输入、设置默认标签等</span></span><br><span class="line">        AbilitySystemComponent-&gt;<span class="built_in">InitAbilityActorInfo</span>(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有玩家控制器，可以进一步初始化与玩家相关的内容</span></span><br><span class="line">        APlayerController* PlayerController = <span class="built_in">Cast</span>&lt;APlayerController&gt;(NewController);</span><br><span class="line">        <span class="keyword">if</span> (PlayerController)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 例如，绑定输入映射</span></span><br><span class="line">            <span class="comment">// AbilitySystemComponent-&gt;BindToInput(PlayerController);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 激活默认能力（如果需要）</span></span><br><span class="line">        <span class="comment">// AbilitySystemComponent-&gt;ActivateAbility(FGameplayAbilitySpecHandle());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyCharacter::UnPossess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">UnPossess</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清理与控制器相关的逻辑，例如清除输入绑定、重置状态等</span></span><br><span class="line">        <span class="comment">// AbilitySystemComponent-&gt;ClearBindings();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关键步骤解释"><a href="#关键步骤解释" class="headerlink" title="关键步骤解释"></a>关键步骤解释</h4><ol><li><p>​<strong>​调用父类函数​</strong>​:</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Super::<span class="built_in">PossessedBy</span>(NewController);</span><br></pre></td></tr></table></figure><p> 确保基类的 <code>PossessedBy</code> 逻辑被执行，以处理默认的拥有行为。</p></li><li><p>​<strong>​初始化 ASC​</strong>​:</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbilitySystemComponent-&gt;<span class="built_in">InitAbilityActorInfo</span>(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p> 这一步将角色和控制器信息绑定到 ASC，使其能够正确管理角色的能力和属性。</p></li><li><p>​<strong>​处理特定类型的控制器​</strong>​:</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">APlayerController* PlayerController = <span class="built_in">Cast</span>&lt;APlayerController&gt;(NewController);</span><br><span class="line"><span class="keyword">if</span> (PlayerController)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 绑定输入或其他玩家特定逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 根据控制器的类型（玩家控制器或 AI 控制器），执行不同的初始化逻辑。</p></li><li><p>​<strong>​激活默认能力​</strong>​:<br> 根据需要，可以在控制器拥有角色时激活某些默认的能力，确保角色在拥有后立即具备所需的行为。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbilitySystemComponent-&gt;ActivateAbility(FGameplayAbilitySpecHandle());</span></span><br></pre></td></tr></table></figure></li><li><p>​<strong>​处理失去控制的情况​</strong>​（可选）:</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyCharacter::UnPossess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">UnPossess</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AbilitySystemComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清理与控制器相关的逻辑，例如清除输入绑定、重置状态等</span></span><br><span class="line">        <span class="comment">// AbilitySystemComponent-&gt;ClearBindings();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在控制器失去对角色的控制时，进行必要的清理工作，确保角色状态的一致性。</p></li></ol><h4 id="使用场景说明-1"><a href="#使用场景说明-1" class="headerlink" title="使用场景说明"></a>使用场景说明</h4><p>在游戏开发中，<code>PossessedBy</code> 函数通常用于以下场景：</p><ul><li>​<strong>​角色初始化​</strong>​: 当玩家或 AI 控制器首次拥有角色时，进行必要的初始化设置，如绑定输入、激活默认能力等。</li><li>​<strong>​控制器切换​</strong>​: 当控制器在运行时切换（例如，玩家死亡后重新控制另一个角色），确保新控制器正确地与角色关联。</li><li>​<strong>​状态管理​</strong>​: 根据控制器的类型（玩家或 AI），调整角色的行为和状态，以适应不同的游戏逻辑。</li></ul><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>​<strong>​避免重复初始化​</strong>​: 确保 <code>PossessedBy</code> 中的初始化逻辑不会在每次控制器切换时重复执行不必要的操作，可以通过标志位或其他机制来管理初始化状态。</p></li><li><p>​<strong>​处理失去控制的情况​</strong>​: 除了 <code>PossessedBy</code>，还需要重写 <code>UnPossess</code> 函数，以处理控制器失去对角色控制时的清理工作，确保角色状态的一致性。</p></li><li><p>​<strong>​同步问题​</strong>​: 在多人联机环境下，要注意这些 Actor 信息的同步问题，确保客户端和服务器端的一致性，特别是在激活能力和应用效果时。</p></li><li><p>​<strong>​输入绑定​</strong>​: 确保输入绑定与控制器的类型匹配，避免在 AI 控制器上绑定不必要的玩家输入逻辑。</p></li></ul><hr><h2 id="​​FGameplayAbilitySpec​​"><a href="#​​FGameplayAbilitySpec​​" class="headerlink" title="​​FGameplayAbilitySpec​​"></a>​<strong>​FGameplayAbilitySpec​</strong>​</h2><blockquote><p>​<strong>​是Unreal Engine (UE)​</strong>​ 中 ​<strong>​Gameplay Ability System (GAS)​</strong>​ 的核心结构体，用于定义和管理单个游戏玩法能力实例。</p></blockquote><hr><h2 id="​​1-主要组成部分​​"><a href="#​​1-主要组成部分​​" class="headerlink" title="​​1. 主要组成部分​​"></a>​<strong>​1. 主要组成部分​</strong>​</h2><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>​<strong>​<code>Ability</code>​</strong>​</td><td><code>TSubclassOf&lt;UGameplayAbility&gt;</code></td><td>具体的能力类（如 <code>UMyGameplayAbility</code>）。</td></tr><tr><td>​<strong>​<code>InputID</code>​</strong>​</td><td><code>int32</code></td><td>输入绑定 ID（如键盘按键或手柄按钮）。</td></tr><tr><td>​<strong>​<code>Level</code>​</strong>​</td><td><code>int32</code></td><td>能力等级（影响强度或效果）。</td></tr><tr><td>​<strong>​<code>ActivationBlockedBy</code>​</strong>​</td><td><code>FGameplayTagContainer</code></td><td>阻止激活的标签（如“眩晕”状态）。</td></tr><tr><td>​<strong>​<code>GrantedTags</code>​</strong>​</td><td><code>FGameplayTagContainer</code></td><td>激活时授予的标签（影响其他能力）。</td></tr><tr><td>​<strong>​<code>SourceObject</code>​</strong>​</td><td><code>UObject*</code></td><td>能力来源（如角色、道具）。</td></tr><tr><td>​<strong>​<code>StartTime</code>​</strong>​</td><td><code>float</code></td><td>激活时间（用于计算持续时间&#x2F;冷却）。</td></tr><tr><td>​<strong>​<code>Duration</code>​</strong>​</td><td><code>float</code></td><td>持续时间（持续型能力）。</td></tr><tr><td>​<strong>​<code>CooldownTimeRemaining</code>​</strong>​</td><td><code>float</code></td><td>剩余冷却时间。</td></tr><tr><td>​<strong>​<code>bIsActive</code>​</strong>​</td><td><code>bool</code></td><td>是否处于激活状态。</td></tr></tbody></table><hr><h2 id="​​2-创建与管理​​"><a href="#​​2-创建与管理​​" class="headerlink" title="​​2. 创建与管理​​"></a>​<strong>​2. 创建与管理​</strong>​</h2><h3 id="​​2-1-创建-FGameplayAbilitySpec​​"><a href="#​​2-1-创建-FGameplayAbilitySpec​​" class="headerlink" title="​​2.1 创建 FGameplayAbilitySpec​​"></a>​<strong>​2.1 创建 <code>FGameplayAbilitySpec</code>​</strong>​</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 AbilitySystemComponent</span></span><br><span class="line">UAbilitySystemComponent* ASC = xxx<span class="comment">/* 获取或初始化 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义能力类和等级</span></span><br><span class="line">TSubclassOf&lt;UGameplayAbility&gt; AbilityClass = UMyGameplayAbility::<span class="built_in">StaticClass</span>();</span><br><span class="line">int32 Level = <span class="number">1</span>;</span><br><span class="line">int32 InputID = <span class="number">0</span>; <span class="comment">// 绑定输入（如按键）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Spec</span></span><br><span class="line"><span class="function">FGameplayAbilitySpec <span class="title">Spec</span><span class="params">(AbilityClass, Level, InputID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到 AbilitySystemComponent</span></span><br><span class="line">ASC-&gt;<span class="built_in">GiveAbility</span>(Spec);</span><br></pre></td></tr></table></figure><h3 id="​​3-1-激活-取消能力​​"><a href="#​​3-1-激活-取消能力​​" class="headerlink" title="​​3.1 激活&#x2F;取消能力​​"></a>​<strong>​3.1 激活&#x2F;取消能力​</strong>​</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 激活能力</span></span><br><span class="line">ASC-&gt;<span class="built_in">ActivateAbility</span>(Spec.Handle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消能力</span></span><br><span class="line">ASC-&gt;<span class="built_in">CancelAbility</span>(Spec.Handle, Spec.ActivationInfo, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="GAS-通知蓝图-很重要必须看！"><a href="#GAS-通知蓝图-很重要必须看！" class="headerlink" title="GAS-通知蓝图-很重要必须看！"></a>GAS-通知蓝图-很重要必须看！</h1><p>看不到图片请联系我，我会给你发本地文档，因为本人很懒，暂时不想添加图片显示。</p><h2 id="Pasted-image-20250422172242-png"><a href="#Pasted-image-20250422172242-png" class="headerlink" title="![[Pasted image 20250422172242.png]]"></a>![[Pasted image 20250422172242.png]]</h2><p>通知蓝图中有个接受通知事件，节点如下<br>该节点发送通知给角色，接受一个角色标签<br>![[Pasted image 20250422172549.png]]<br>通知的的原理：一定要使得游戏标签可见，使用send gameplayevent to actor 节点将通知通过游戏标签发送给角色，Event gameplay enent节点用于接受通知并执行<br>![[Pasted image 20250422173850.png]]<br>那么可以利用在动画蓝图中放置自定义通知，一旦动画播放完，收到通知则将武器绑定到手部，实现或者实现其它任意功能了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GAS系统简介-什么是GAS系统&quot;&gt;&lt;a href=&quot;#GAS系统简介-什么是GAS系统&quot; class=&quot;headerlink&quot; title=&quot;GAS系统简介-什么是GAS系统&quot;&gt;&lt;/a&gt;GAS系统简介-什么是GAS系统&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;GAS​&lt;/</summary>
      
    
    
    
    <category term="虚幻引擎" scheme="http://example.com/categories/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/"/>
    
    <category term="游戏开发" scheme="http://example.com/categories/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="GAS" scheme="http://example.com/tags/GAS/"/>
    
    <category term="Unreal Engine" scheme="http://example.com/tags/Unreal-Engine/"/>
    
    <category term="Gameplay Ability System" scheme="http://example.com/tags/Gameplay-Ability-System/"/>
    
  </entry>
  
</feed>
